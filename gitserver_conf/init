#!/usr/bin/env sh

# Create the ssh host keys if they dont exist

# Generate host keys if they don't exist: dsa, ecdsa, ed25519, rsa
if [[ ! -f "/data/etc/ssh/ssh_host_ecdsa_key" ]]; then
  echo "Generating ecdsa host key"
  mkdir -p /data/etc/ssh
  ssh-keygen -t ecdsa -f "/data/etc/ssh/ssh_host_ecdsa_key" -N ''
fi

if [[ ! -f "/data/etc/ssh/ssh_host_ed25519_key" ]]; then
  echo "Generating ed25519 host key"
  mkdir -p /data/etc/ssh
  ssh-keygen -t ed25519 -f "/data/etc/ssh/ssh_host_ed25519_key" -N ''
fi

if [[ ! -f "/data/etc/ssh/ssh_host_rsa_key" ]]; then
  echo "Generating rsa host key"
  mkdir -p /data/etc/ssh
  ssh-keygen -t rsa -f "/data/etc/ssh/ssh_host_rsa_key" -N ''
fi

# create the empty dir for sshd if it doesn't exist
if [[ ! -d /var/empty ]]; then
  mkdir -p /var/empty
fi

# create the git log dir if it doesn't exist
if [[ ! -d /home/git/.gitolite/logs ]]; then
  mkdir -p /home/git/.gitolite/logs
  chown -R git:git /home/git
fi

# create the git .ssh dir if it doesn't exist
if [[ ! -d /home/git/.ssh ]]; then
  mkdir -p /home/git/.ssh
  touch /home/git/.ssh/authorized_keys
  chown -R git:git /home/git
fi

# setup gitolite if the admin ssh pub key does not exist else just repair hooks
if ! grep -qs "# gitolite start" /home/git/.ssh/authorized_keys; then
  echo "${SSH_KEY}" > "/home/git/${SSH_ADMIN}.pub"
  chown -R git:git /data/home
  su git -c "/usr/bin/gitolite setup -pk /home/git/${SSH_ADMIN}.pub"
fi

# migrate gitolite-shell command in authorized_keys file from debian to alpine
if grep -qs '/usr/share/gitolite3/gitolite-shell' /home/git/.ssh/authorized_keys; then
  sed -i -e 's|/usr/share/gitolite3/gitolite-shell|/usr/lib/gitolite/gitolite-shell|g' /home/git/.ssh/authorized_keys
  chown -R git:git /home/git
fi

echo "Running: $*"
exec $*
